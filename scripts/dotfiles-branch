#!/bin/zsh
#
# dotfiles-branch - Branch management for dotfiles

# Source shared utilities
script_dir="$(cd "$(dirname "$0")" && pwd)"
source "$script_dir/dotfiles-shared"

# Check if branch supplied
if [[ -z "$1" ]]; then
    _dot_echo_error "Branch name is required. Use ${_CB}'dotfiles branch <branchname>'${_CN} to set the default branch."
    exit 1
else
    new_branch="$1"
fi

# Validate branch name to prevent command injection
if [[ "$new_branch" =~ [\$\`\;\|\&\<\>\(\)] ]]; then
    _dot_echo_error "Branch name contains invalid characters"
    exit 1
fi

# Setup common variables
if ! _dot_setup; then
    exit 1
fi

# Verify branch exists on remote GitHub repository
_dot_echo_info "Checking if branch ${_CB}'$new_branch'${_CN} exists on GitHub..."
if ! _dot_git_with_timeout_quiet ls-remote --exit-code --heads origin "$new_branch"; then
    _dot_echo_error "Branch ${_CB}'$new_branch'${_CN} does not exist on GitHub"
    exit 1
fi

# Update default branch in configuration file
_dot_echo_info "Updating default branch to ${_CB}'$new_branch'${_CN} in config file..."

# Ensure config is valid
if ! _dot_load_config; then
    _dot_echo_error "Failed to load configuration. Run ${_CB}dotfiles edit${_CN} or ${_CB}dotfiles reset${_CN} to fix the error."
    exit 1
fi

# Create new config with updated value
# Atomic config update using temporary file
temp_file=$(mktemp)
updated=false
# Process existing config line by line
while IFS= read -r line || [[ -n "$line" ]]; do
    if [[ "$line" =~ ^[[:space:]]*selected_branch[[:space:]]*= ]]; then
        echo "selected_branch=$new_branch"
        updated=true
    else
        echo "$line"
    fi
done < "$_DOT_CONFIG_FILE" > "$temp_file"

# Atomically replace the original file
if ! mv "$temp_file" "$_DOT_CONFIG_FILE"; then
    # Cleanup on failure
    rm -f "$temp_file" 2>/dev/null || true
    echo -e "${}Error:${_CN} Failed to update config file" >&2
    exit 1
fi

# Update the variables for this session
_DOT_SELECTED_BRANCH="$new_branch"
_DOT_TARGET_BRANCH="$new_branch"

if [[ "$_DOT_CURRENT_BRANCH" != "$_DOT_TARGET_BRANCH" ]]; then
    _dot_echo_info "Switching to branch ${_CB}'$_DOT_TARGET_BRANCH'${_CN}..."

    # Fetch to ensure we have the latest remote refs
    _dot_git_with_timeout_quiet fetch origin

    # Try to checkout existing local branch, or create tracking branch if it doesn't exist
    if ! _dot_git_quiet checkout "$_DOT_TARGET_BRANCH"; then
        # If checkout failed, try to create a new tracking branch
        if ! _dot_git_quiet checkout -b "$_DOT_TARGET_BRANCH" "origin/$_DOT_TARGET_BRANCH"; then
            _dot_echo_error "Failed to switch to branch ${_CB}'$_DOT_TARGET_BRANCH'${_CN}."
            exit 1
        fi
    fi
    # Update _DOT_CURRENT_BRANCH after successful switch and validate
    new_current=$(_dot_git branch --show-current)
    if [[ "$new_current" == "$_DOT_TARGET_BRANCH" ]]; then
        _DOT_CURRENT_BRANCH="$_DOT_TARGET_BRANCH"
    else
        _dot_echo_warning "Branch switch may have failed (expected '$_DOT_TARGET_BRANCH', got '$new_current')"
        exit 1
    fi
fi

_dot_echo_info "On branch ${_CB}'$_DOT_CURRENT_BRANCH'${_CN}."
_dot_echo_info "Restart your terminal to apply changes."
