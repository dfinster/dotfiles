#!/bin/zsh
#
# dotfiles check - compare local VERSION with remote VERSION on GitHub

# Source shared utilities
script_dir="$(cd "$(dirname "$0")" && pwd)"
source "$script_dir/dotfiles-shared"

check_type="$1"
# Always run setup first for config loading and corruption detection
if ! _dot_setup; then
    exit 1  # Setup failed, stop processing
fi

# If running at startup and $_DOT_AUTO_UPDATE_DOTFILES is false, the skip the check
if [[ "$check_type" == "startup" ]] && [[ "$_DOT_AUTO_UPDATE_DOTFILES" == "false" ]]; then
    exit 0 # Skip remote check at startup if auto updates are disabled
fi

if [[ "$check_type" == "startup" ]]; then
    # Test timestamp of $_DOT_CACHE_FILE to determine if we should skip remote check
    if [[ -f "$_DOT_CACHE_FILE" ]]; then
        cache_time=$(_dot_get_file_mtime "$_DOT_CACHE_FILE")
        current_time=$(date +%s)
        if (( current_time - cache_time < _DOT_CACHE_DURATION )); then
            exit 0  # Timeout has not expired, skip remote check
        fi
    fi
fi

# Inform user the check is beginning
if [[ "$_DOT_TARGET_BRANCH" != "$_DOT_CURRENT_BRANCH" ]]; then
    echo
    _dot_echo_info "dotfiles configuration mismatch detected."
    _dot_echo_info "dotfiles is on the ${_CB}'$_DOT_CURRENT_BRANCH'${_CN} branch."
    _dot_echo_info "dotfiles config is set to the ${_CB}'$_DOT_TARGET_BRANCH'${_CN} branch."
    _dot_echo_info "Please use ${_CB}'dotfiles branch <branchname>'${_CN} to choose a branch."
    exit 1  # Mismatch detected, stop processing
fi

# Local VERSION file
local_version_file="${0:A:h:h}/VERSION"
if [[ ! -f "$local_version_file" ]]; then
    _dot_echo_error "Local VERSION file not found: $local_version_file"
    exit 1
fi
local_version=$(<"$local_version_file")

# Fetch remote VERSION file
remote_version=$(curl -fsSL "https://raw.githubusercontent.com/$_DOT_OWNER/$_DOT_REPO/$_DOT_SELECTED_BRANCH/VERSION" 2>/dev/null)
if [[ -z "$remote_version" ]]; then
    echo "Failed to fetch remote VERSION file."
    exit 1
fi

# Strip leading 'v' from both versions
local_version_stripped="${local_version#v}"
remote_version_stripped="${remote_version#v}"

# Semantic version comparison
if [[ "$local_version_stripped" == "$remote_version_stripped" ]]; then
    if [[ "$check_type" != "startup" ]]; then
        _dot_echo_info "Your dotfiles are up to date."
    fi
else
    # Use sort -V to compare
    cmp_result=$(printf "%s\n%s" "$local_version_stripped" "$remote_version_stripped" | sort -V | head -n1)
    if [[ "$cmp_result" == "$local_version_stripped" ]]; then
        _dot_echo_info "Local dotfiles ${_CY}$local_version${_CN} are older than remote ${_CY}$remote_version${_CN}."
        _dot_echo_info "See ${_CB}$_DOT_GITHUB_URL/blob/$_DOT_TARGET_BRANCH/CHANGELOG${_CN}"
        _dot_echo_info "Run ${_CB}dotfiles update${_CN} to update."
        _dot_echo_info "Run ${_CB}dotfiles help${_CN} for options."
    else
        _dot_echo_info "Local dotfiles ${_CY}$local_version${_CN} are newer than remote ${_CY}$remote_version${_CN}."
    fi
fi

# Update cache file to record successful check
touch "$_DOT_CACHE_FILE"
