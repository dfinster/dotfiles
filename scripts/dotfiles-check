#!/bin/zsh
#
# dotfiles check - check for new versions
#

# Source shared utilities
script_dir="$(cd "$(dirname "$0")" && pwd)"
source "$script_dir/dotfiles-shared"

check_type="$1"
# Always run setup first for config loading and corruption detection
if ! _dot_setup; then
    exit 1  # Setup failed, stop processing
fi

# If running at startup and $_DOT_AUTO_UPDATE_DOTFILES is false, the skip the check
if [[ "$check_type" == "startup" ]] && [[ "$_DOT_AUTO_UPDATE_DOTFILES" == "false" ]]; then
    exit 0 # Skip remote check at startup if auto updates are disabled
fi

if [[ "$check_type" == "startup" ]]; then
    # Test timestamp of $_DOT_CACHE_FILE to determine if we should skip remote check
    if [[ -f "$_DOT_CACHE_FILE" ]]; then
        cache_time=$(_dot_get_file_mtime "$_DOT_CACHE_FILE")
        current_time=$(date +%s)
        if (( current_time - cache_time < _DOT_CACHE_DURATION )); then
            exit 0  # Timeout has not expired, skip remote check
        fi
    fi
fi

if [[ "$_DOT_TARGET_BRANCH" != "$_DOT_CURRENT_BRANCH" ]]; then
    echo
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} dotfiles configuration mismatch detected."
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} dotfiles is on the ${_DOT_BLUE}'$_DOT_CURRENT_BRANCH'${_DOT_RESET} branch."
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} dotfiles config is set to the ${_DOT_BLUE}'$_DOT_TARGET_BRANCH'${_DOT_RESET} branch."
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Please use ${_DOT_BLUE}'dotfiles branch <branchname>'${_DOT_RESET} to choose a branch."
    exit 1  # Mismatch detected, stop processing
fi

# Display info for startup (automatic checks)
if [[ "$check_type" == "startup" ]]; then
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Run ${_DOT_BLUE}dotfiles help${_DOT_RESET} for options."
    echo
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Checking the ${_DOT_BLUE}$_DOT_CURRENT_BRANCH${_DOT_RESET} branch for updates."
fi

# Check if we can reach GitHub (fail silently without error if offline)
_dot_debug "CHECK" "Testing network connectivity to origin"
if ! _dot_git_with_timeout_quiet ls-remote origin; then
    _dot_debug "CHECK" "Network connectivity failed, exiting silently"
    exit 0
fi
_dot_debug "CHECK" "Network connectivity confirmed"

# Fetch latest remote information
_dot_debug "CHECK" "Fetching latest remote information for $_DOT_TARGET_BRANCH"
_dot_git_with_timeout_quiet fetch origin "$_DOT_TARGET_BRANCH"

# Update cache file to record successful check
_dot_debug "CHECK" "Updating cache file: $_DOT_CACHE_FILE"
touch "$_DOT_CACHE_FILE"

# Check if local branch is behind remote
if ! commits_behind=$(_dot_git rev-list --count HEAD..origin/"$_DOT_TARGET_BRANCH" 2>/dev/null) || [[ -z "$commits_behind" ]]; then
    echo -e "${_DOT_RED}Error:${_DOT_RESET} Failed to check for updates (git rev-list failed)" >&2
    exit 1
fi

if [[ "$commits_behind" -eq 0 ]]; then
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Your dotfiles are up to date."
else
    # Show what's new and prompt user to run update
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Newer dotfiles are available."
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} You are ${_DOT_BLUE}${commits_behind}${_DOT_RESET} commit(s) behind the remote."
    echo
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} - See changelog at '${_DOT_BLUE}$_DOT_GITHUB_URL/blob/$_DOT_TARGET_BRANCH/CHANGELOG.md${_DOT_RESET}' for details."
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} - Run '${_DOT_BLUE}dotfiles update${_DOT_RESET}' to update."
fi
