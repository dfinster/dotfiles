#!/bin/zsh
#
# dotfiles-update - Update dotfiles from remote repository
#

# Source shared utilities
script_dir="$(cd "$(dirname "$0")" && pwd)"
source "$script_dir/dotfiles-shared"

# Always run setup first for config loading and corruption detection
_dot_debug "UPDATE" "Starting dotfiles update process"
if ! _dot_setup; then
    _dot_debug "UPDATE" "Setup failed, exiting"
    exit 1
fi

# Handle branch mismatch between environment and git repository
_dot_debug "UPDATE" "Checking branch mismatch: target=$_DOT_TARGET_BRANCH, current=$_DOT_CURRENT_BRANCH"
if [[ "$_DOT_TARGET_BRANCH" != "$_DOT_CURRENT_BRANCH" ]]; then
    _dot_debug "UPDATE" "Branch mismatch detected, stopping update"
    echo
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} dotfiles configuration mismatch detected."
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} dotfiles is on the ${_DOT_BLUE}'$_DOT_CURRENT_BRANCH'${_DOT_RESET} branch."
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} dotfiles config is set to the ${_DOT_BLUE}'$_DOT_TARGET_BRANCH'${_DOT_RESET} branch."
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Please use ${_DOT_BLUE}'dotfiles branch <branchname>'${_DOT_RESET} to choose a branch."
    exit 1  # Mismatch detected, stop processing (failure)
fi

echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Updating dotfiles..."

# Stash local changes before update, if there are any
_dot_debug "UPDATE" "Checking for local changes to stash"
if ! _dot_git_quiet diff-index --quiet HEAD --; then
    _dot_debug "UPDATE" "Local changes detected, attempting to stash"
    # Attempt to stash changes
    if ! _dot_git_quiet stash push -m "Auto-stash before dotfiles update $(date)"; then
        _dot_debug "UPDATE" "Failed to stash local changes"
        echo -e "${_DOT_RED}Error:${_DOT_RESET} Failed to stash local changes (git stash failed)" >&2
        exit 1
    fi
    stash_created=true
    _dot_debug "UPDATE" "Local changes stashed successfully"
    echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Local changes stashed."
else
    _dot_debug "UPDATE" "No local changes to stash"
fi

# Perform git pull and update plugins
_dot_debug "UPDATE" "Pulling from origin/$_DOT_TARGET_BRANCH"
if ! _dot_git_with_timeout_quiet pull origin "$_DOT_TARGET_BRANCH"; then
    _dot_debug "UPDATE" "Git pull failed"
    echo -e "${_DOT_RED}Error:${_DOT_RESET} Update failed" >&2
    exit 1
fi
_dot_debug "UPDATE" "Git pull completed successfully"

echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Dotfiles updated successfully."

# Update antidote plugins if enabled and available
if [[ "$_DOT_AUTO_UPDATE_ANTIDOTE" == "true" ]]; then

    if type antidote >/dev/null 2>&1; then
        echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Updating antidote plugins..."
        if antidote update >/dev/null 2>&1; then
            echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Antidote plugins updated successfully."
        else
            echo -e "${_DOT_YELLOW}Warning:${_DOT_RESET} Antidote plugin update failed, but dotfiles update succeeded."
        fi
    else
        echo -e "${_DOT_YELLOW}Info:${_DOT_RESET} Antidote not available, skipping plugin updates."
    fi
else
    echo -e "${_DOT_YELLOW}Info:${_DOT_RESET} Antidote auto-update is disabled (auto_update_antidote=false)."
fi

# Restore stashed changes, if we created a stash
if [[ $stash_created == "true" ]]; then
    if _dot_git_quiet stash pop; then
        echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Local stash restored successfully."
    else
        echo -e "${_DOT_YELLOW}Warning:${_DOT_RESET} Local stash could not be restored; you may need to resolve conflicts manually."
        echo -e "${_DOT_YELLOW}Warning:${_DOT_RESET} You can view the stash with 'git stash list' and apply it manually if needed."
    fi
fi

echo -e "${_DOT_GREEN}Info:${_DOT_RESET} Please restart your terminal to apply all changes."
